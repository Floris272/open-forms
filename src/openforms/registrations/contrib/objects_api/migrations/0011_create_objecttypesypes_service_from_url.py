# Generated by Django 3.2.23 on 2024-01-31 14:20
import logging
import re
from furl import furl

from django.db import migrations
from django.db.migrations.state import StateApps
from django.db.backends.base.schema import BaseDatabaseSchemaEditor

from openforms.registrations.contrib.objects_api.plugin import (
    PLUGIN_IDENTIFIER as OBJECTS_API_PLUGIN_IDENTIFIER,
)

from zgw_consumers.constants import APITypes

logger = logging.getLogger(__name__)


def create_objecttypes_api_service(
    apps: StateApps, schema_editor: BaseDatabaseSchemaEditor
) -> None:
    """Create a "placeholder" Objecttypes API service from an already existing Objecttypes URL.

    This migration exists to help users migrate to a new version of Open Forms. Note that
    they will still need to configure authentication on the created Objecttypes Service.
    """
    ObjectsAPIConfig = apps.get_model("registrations_objects_api", "ObjectsAPIConfig")

    # First, try getting the default objecttypes URL
    try:
        objects_api_config = ObjectsAPIConfig.objects.get()
    except ObjectsAPIConfig.DoesNotExist:
        return
    if objects_api_config.objecttypes_service:
        # Extra safety, even though it shouldn't happen
        return

    objecttypes_url = objects_api_config.objecttype

    # If no default objecttypes URL was configured, get it from form registration backends:
    if not objecttypes_url:
        form_registration_urls: set[str] = set()

        FormRegistrationBackend = apps.get_model("forms", "FormRegistrationBackend")
        for form_registration_backend in FormRegistrationBackend.objects.filter(
            backend=OBJECTS_API_PLUGIN_IDENTIFIER
        ).iterator():
            if url := form_registration_backend.options.get("objecttype"):
                form_registration_urls.add(url)

        if len(form_registration_urls) >= 2:
            logger.warning(
                "Found %d different Objecttypes URLs in form registration backend options",
                len(form_registration_urls),
            )

        if form_registration_urls:
            objecttypes_url = form_registration_urls.pop()

    if objecttypes_url:
        Service = apps.get_model("zgw_consumers", "Service")

        root_url = furl(objecttypes_url).remove(fragment=True, query=True)
        path_segments = root_url.path.segments

        # Keep the relevant part of the path,
        # e.g. /path/v2/other/path/api/v2/objecttypes/uuid -> /path/v2/other/path/api/v2/
        for i, path in enumerate(reversed(path_segments)):
            if re.match(r"v\d", path):
                root_url.set(path=path_segments[: len(path_segments) - i])
                break

        # This "path normalization" is normally done in the `Service.save` method,
        # but we are dealing with "fake" models during migrations.
        if not root_url.path.isdir:
            root_url.path.segments.append("")  # Empty string means leading '/'

        objects_api_config.objecttypes_service = Service.objects.create(
            api_type=APITypes.orc,
            api_root=str(root_url),
            oas=str(root_url / "schema/openapi.yaml"),
        )

        objects_api_config.save()


class Migration(migrations.Migration):

    dependencies = [
        ("registrations_objects_api", "0010_objectsapiconfig_objecttypes_service"),
    ]

    operations = [
        migrations.RunPython(create_objecttypes_api_service, migrations.RunPython.noop),
    ]
