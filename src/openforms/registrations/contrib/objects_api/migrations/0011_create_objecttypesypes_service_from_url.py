# Generated by Django 3.2.23 on 2024-01-31 14:20
import logging
import re
from furl import furl

from django.db import migrations
from django.db.migrations.state import StateApps
from django.db.backends.base.schema import BaseDatabaseSchemaEditor

from openforms.registrations.contrib.objects_api.plugin import (
    PLUGIN_IDENTIFIER as OBJECTS_API_PLUGIN_IDENTIFIER,
)

from zgw_consumers.constants import APITypes, AuthTypes

logger = logging.getLogger(__name__)


def create_objecttypes_api_service(
    apps: StateApps, schema_editor: BaseDatabaseSchemaEditor
) -> None:
    """Create a "placeholder" Objecttypes API service from an already existing Objecttypes URL.

    This migration exists to help users migrate to a new version of Open Forms. Note that
    they will still need to configure authentication on the created Objecttypes Service.
    """
    ObjectsAPIConfig = apps.get_model("registrations_objects_api", "ObjectsAPIConfig")

    # First, try getting the default objecttypes URL
    try:
        objects_api_config = ObjectsAPIConfig.objects.get()
    except ObjectsAPIConfig.DoesNotExist:
        return
    if objects_api_config.objecttypes_service:
        # Extra safety, even though it shouldn't happen
        return

    objecttypes_url = objects_api_config.objecttype

    # If no default objecttypes URL was configured, get it from form registration backends:
    if not objecttypes_url:
        form_registration_bases_urls: set[str] = set()

        FormRegistrationBackend = apps.get_model("forms", "FormRegistrationBackend")
        for form_registration_backend in FormRegistrationBackend.objects.filter(
            backend=OBJECTS_API_PLUGIN_IDENTIFIER
        ).iterator():
            if url := form_registration_backend.options.get("objecttype"):
                index = url.find("/api/")
                if index != -1:
                    objecttypes_url = url
                    form_registration_bases_urls.add(url[:index])

        if len(form_registration_bases_urls) >= 2:
            logger.warning(
                "Found %d different Objecttypes URLs in form registration backend options",
                len(form_registration_bases_urls),
            )

    if objecttypes_url:
        Service = apps.get_model("zgw_consumers", "Service")

        try:
            base, _ = re.split(r"api/v\d", objecttypes_url, 1)
        except ValueError:
            logger.warning(
                "URL %s is not compliant, skipping migration", objecttypes_url
            )
            return

        api_version = re.search(r"/api/v(\d)", objecttypes_url).group(1)
        base += f"api/v{api_version}/"

        service, _ = Service.objects.get_or_create(
            api_root=base,
            defaults={
                "api_type": APITypes.orc,
                "auth_type": AuthTypes.api_key,
                "oas": f"{base}schema/openapi.yaml",
            },
        )
        objects_api_config.objecttypes_service = service

        objects_api_config.save()


class Migration(migrations.Migration):

    dependencies = [
        ("registrations_objects_api", "0010_objectsapiconfig_objecttypes_service"),
        ("forms", "0104_allow_invalid_input_datetime"),
    ]

    operations = [
        migrations.RunPython(create_objecttypes_api_service, migrations.RunPython.noop),
    ]
