from abc import ABC, abstractmethod
from typing import TYPE_CHECKING, Any

from rest_framework import serializers

from openforms.plugins.plugin import AbstractBasePlugin
from openforms.utils.mixins import JsonSchemaSerializerMixin

if TYPE_CHECKING:
    from openforms.submissions.models import Submission

SerializerCls = type[serializers.Serializer]


class EmptyOptions(JsonSchemaSerializerMixin, serializers.Serializer):
    pass


class BasePlugin(ABC, AbstractBasePlugin):
    configuration_options: SerializerCls = EmptyOptions
    """
    A serializer class describing the plugin-specific configuration options.

    A plugin instance is the combination of a plugin callback and a set of options that
    are plugin specific. Multiple forms can use the same plugin with different
    configuration options. Using a serializer allows us to serialize the options as JSON
    in the database, and de-serialize them into native Python/Django objects when the
    plugin is called.
    """
    camel_case_ignore_fields = None
    """
    Iterable of JSON keys to ignore when converting between snake_case/camelCase.
    """

    @abstractmethod
    def register_submission(
        self, submission: "Submission", options: dict
    ) -> dict | None:
        raise NotImplementedError()

    @abstractmethod
    def get_reference_from_result(self, result: Any) -> str:
        """
        Extract the public submission reference from the result data.

        This method must return a string to be saved on the submission model.

        :arg result: the raw underlying JSONField datastructure.
        """
        raise NotImplementedError()

    def update_payment_status(self, submission: "Submission", options: dict):
        raise NotImplementedError()

    def pre_register_submission(self, submission: "Submission", options: dict) -> None:
        """Perform any tasks before registering the submission

        For plugins where the registration backend does not generate a reference number, an internal reference number
        can be set on the submission in this step.
        """
        pass

    def obtain_submission_reference(
        self, submission: "Submission", options: dict
    ) -> None:
        """Obtain the reference number generated by the registration backend and set it on the submission."""
        pass

    def get_custom_templatetags_libraries(self) -> list[str]:
        """
        Return a list of custom templatetags libraries that will be added to the 'sandboxed' Django templates backend.
        """
        return []
